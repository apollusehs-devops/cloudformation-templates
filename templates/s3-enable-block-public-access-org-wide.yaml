AWSTemplateFormatVersion: '2010-09-09'
Description: Enable S3 Block Public Access via Systems Manager Execution

Resources:

#  Trigger:
#    Type: AWS::Events::Rule
#    Properties:
#      ScheduleExpression: rate(1 day)
#      State: 'ENABLED'
#      Targets:
#        - Arn: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${ExecuteCrossAccountCrossRegion}'
#          Id: EnableS3BlockPublicAccessViaSSM
#          RoleArn: !GetAtt SSMAutomationExecutionRoleforCWEvents.Arn
#
#
#  SSMAutomationExecutionRoleforCWEvents:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: events.amazonaws.com
#            Action: sts:AssumeRole
#      Path: /
#      Policies:
#        - PolicyName: AllowStartAutomationExecution
#          PolicyDocument:
#            Statement:
#              - Effect: Allow
#                Action:
#                  - ssm:StartAutomationExecution
#                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${ExecuteCrossAccountCrossRegion}:*'

  ExecuteCrossAccountCrossRegion:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        assumeRole: !GetAtt StartExecutionRoleForSSM.Arn
        mainSteps:
          - name: GetOrganizationalUnitsForRoot
            action: aws:executeScript
            inputs:
              Runtime: python3.7
              Handler: handler
              Script: |-
                import boto3

                organizations = boto3.client('organizations')
                ssm = boto3.client('ssm')

                def handler(events, context):
                  root = organizations.list_roots()['Roots'][0]['Id']
                  organizational_units = [ou['Id'] for ou in organizations.list_organizational_units_for_parent(ParentId=root)['OrganizationalUnits']]

                  ssm.start_automation_execution(
                    DocumentName='s3-enable-block-public-access-EnableS3BlockPublicAccessDocument-OTVQNLQ2OI4S',
                    TargetLocations=[
                      {
                        'Accounts': organizational_units,
                        'Regions': [
                          'eu-west-1',
                        ],
                        'ExecutionRoleName': 'AWSControlTowerExecution'
                      },
                    ],
                  )

          - name: StartAutomationExecution
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: StartAutomationExecution
              DocumentName: !Ref EnableS3BlockPublicAccessDocument
              TargetLocations:
                - ExecutionRoleName: AWSControlTowerExecution
                  Accounts: '{{ GetOrganizationalUnitsForRoot.OrganizationalUnitsInRoot }}'
                  Regions:
                    - eu-west-1
            isEnd: true

  StartExecutionRoleForSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
        - PolicyName: AllowStartAutomationExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ssm:StartAutomationExecution
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableS3BlockPublicAccessDocument}:*'
        - PolicyName: AllowCallCrossAccountCrossRegionAutomation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::*:role/AWSControlTowerExecution

  EnableS3BlockPublicAccessDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        mainSteps:
          - name: PutAccountPublicAccessBlock
            action: aws:executeAwsApi
            inputs:
              Service: s3control
              Api:  PutPublicAccessBlock
              PublicAccessBlockConfiguration:
                BlockPublicAcls: True
                BlockPublicPolicy: True
                IgnorePublicAcls: True
                RestrictPublicBuckets: True
              AccountId: '{{ global:ACCOUNT_ID }}'
            isEnd: true
